name: Python CI

on:
  push:
    branches:
      - main
      - development
      - workflow-development

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use the latest Python 3 version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Install ffmpeg on Ubuntu
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Check script syntax
      run: |
        python -m py_compile vidcompress.py

    - name: Run tests and generate reports
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest -v --cov=vidcompress --cov-report=xml --junitxml=junit.xml -o junit_family=legacy --alluredir=allure-results

    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      with:
        name: allure-results-ubuntu
        path: allure-results
        retention-days: 7

    - name: Generate Allure Report (Ubuntu)
      uses: simple-elf/allure-report-action@v1.8
      if: always()
      id: allure-report-ubuntu
      with:
        allure_results: allure-results
        gh_pages: gh-pages
        allure_report: allure-report-ubuntu
        allure_history: allure-history-ubuntu
        keep_reports: true

    - name: Deploy to GitHub Pages (Ubuntu)
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-history-ubuntu
        force_orphan: true

    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use the latest Python 3 version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Install ffmpeg on Windows
      run: |
        choco install ffmpeg -y

    - name: Check script syntax
      run: |
        python -m py_compile vidcompress.py

    - name: Run tests and generate reports
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest -v --cov=vidcompress --cov-report=xml --junitxml=junit.xml -o junit_family=legacy --alluredir=allure-results

    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      with:
        name: allure-results-windows
        path: allure-results
        retention-days: 7

    - name: Generate Allure Report (Windows)
      uses: simple-elf/allure-report-action@v1.8
      if: always()
      id: allure-report-windows
      with:
        allure_results: allure-results
        gh_pages: gh-pages
        allure_report: allure-report-windows
        allure_history: allure-history-windows
        keep_reports: true

    - name: Deploy to GitHub Pages (Windows)
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-history-windows
        force_orphan: true

    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}